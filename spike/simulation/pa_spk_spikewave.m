function spike = pa_spikewave(type,varargin)
% SPIKE = PA_SIKEWAVE
%
% Generate a spike waveform.
%
% SPIKE = PA_SIKEWAVE(TYPE)
%
% You can choose from 4 predefined waveform types (default type=2).
%
% The spike is generated by low-pass filtering a series of pulses with
% order N (default = 2 or 3, for type 1 or other, respectively) and
% timeconstant Tc (in samples, default = 2).
%
% SPIKE = PA_SPIKEWAVE(...,'PARAM1',val1,'PARAM2',val2) specifies optional
% name/value pairs for filter parameters. Parameters are:
%	'order'	- filter order N.
%	'Tc'	- time constant (in samples)
%	'pulse'	- a series of pulses if you want to create your own waveform
%	type.
%
% A typical spike wave form will be between 30-40 samples long (at
% 12.5 kHz, this is about 3 ms)


% (c) Marc van Wanrooij


%% Initialization
if nargin<1
	type = 2;
end
%% Optional filter arguments
order         = pa_keyval('order',varargin); % order of low-pass filter
if isempty(order)
	if type==1
		order	= 2;
	else
		order	= 3;
	end
end
Tc         = pa_keyval('Tc',varargin); % time-constant (samples)
if isempty(Tc)
	Tc		= 2;
end


%% Predefined waveform-types
pulse         = pa_keyval('pulse',varargin); % time-constant (samples)
if isempty(pulse)
	pulse = zeros(1,35);
	switch type
		case 1
			pulse(5)=-1;
		case 2
			pulse(1)=1; pulse(8)=-1;
		case 3
			pulse(1)=-1; pulse(7)=1.0; pulse(11)=-1;
		case 4
			pulse(3)=-1;
			pulse(6)=1;
	end
end


%% Spike
timef       = 0:40;
filter      = (timef).^(order-1)/pa_faculty(order-1).*exp(-timef/Tc);
spike       = conv(filter, pulse);
spike       = spike(1:length(pulse));



