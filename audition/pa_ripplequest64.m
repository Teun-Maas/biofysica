function Q = pa_ripplequest64(fname)% PA_RIPPLEQUEST%% Determine spectro-temporal transfer function / modulation threshold.%% See also QUEST, PSYCHTOOLBOX, BASICSOUNDOUTPUTDEMO, PA_RIPPLEQUEST_PLOT% 2011 Marc van Wanrooij% e-mail: marcvanwanrooij@neural-code.com%% Includes modified code from: % QuestDemo, Copyright (c) 1996-2004 Denis G. Pelli% BasicSoundOutputDemo 06/07/2007 MK%% Input checkif nargin<1	fname = 'ripplequest';endclose allexperimenter = 0;if experimenter	pause(10)end%% Ripple% ripple parameters% vel				= [0 pa_oct2bw(4,0:6)];% dens			= linspace(-4,4,9);% vel				= [0 pa_oct2bw(4,0:3:6)];vel				= 0;dens			= [64 128];[vel,dens]		= meshgrid(vel,dens);vel				= vel(:);dens			= dens(:);n				= numel(vel); % number of ripples% plot(vel,dens,'.');% return% Here we randomize the presentation order of the ripplesindx			= randperm(n);vel				= vel(indx);dens			= dens(indx);%% Psychophysics% We ask Quest for a theshold-value for all ripplesQ				= struct([]); % these will be stored in Q% On each trial we ask Quest to recommend an intensity and we call QuestUpdate to save the result in q.trials	= 40;maxDuration		= (2000+1000)*n*trials/1000; % smeanDuration	= (1850)*n*trials/1000; % sstr = ['This experiment will last maximally ' num2str(maxDuration/60) ' min'];disp(str)str = ['and on average ' num2str(meanDuration/60) ' min'];disp(str)for ii = 1:n	% Provide our prior knowledge to QuestCreate, and receive the data struct "q".	tGuess				= 0.5; % Threshold estimate (prior)	tGuessSd			= 5; % Threshold estimate standard deviation	pThreshold			= 0.75; % Default Quest = 0.82	beta				= 4;	delta				= 0.01;	gamma				= 0.5;	q					= QuestCreate(tGuess,tGuessSd,pThreshold,beta,delta,gamma);	q.normalizePdf		= 1; % This adds a few ms per call to QuestUpdate, but otherwise the pdf will underflow after about 1000 trials.	q.lat				= [];	Q(ii).q				= q;	Q(ii).vel			= vel(ii);	Q(ii).dens			= dens(ii);endtry	Q = pa_ripplequest_tdt(fname,Q,trials);catch	Fs	= 44100;	Q		= pa_ripplequest_pc(fname,Q,Fs,trials);end	function Q = pa_ripplequest_tdt(fname,Q,trials)% RIPPLEQUEST for TDTn			= length(Q); % number of ripples%% TDT3, 1 rack: RP2.1 en PA.5circuitRP2 = 'C:\Dick\marcRipple.rco'; % circuit[zBus   err(1)] = ZBUS(1); %#ok<ASGLU> % number of racks[RP2_1  err(2)] = RP2(1,circuitRP2); % Real-time processor[PA5_1  err(3)] = PA5(1); % Programmable attenuatorok              = (sum(err) == 0);if ok	str = 'Everything is OK';else	str = 'Trouble';enddisp(str);% set attenuationPA5_1.SetAtten(20);%% Wait for subject readydisp('Please press button to start the experiment');% Wait for release of all keys on keyboard:% KbReleaseWait;% press        = RP2_1.GetTagVal('Button');% while press && ~KbCheck%     press        = RP2_1.GetTagVal('Button');% end%% Actual testfor ii = 1:n	for kk = 1:trials		% Get recommended level.  Choose your favorite algorithm.		q		= Q(ii).q;		vel		= Q(ii).vel;		dens	= Q(ii).dens;		tTest	= QuestQuantile(q);	% Recommended by Pelli (1987), and still our favorite.		% We are free to test any intensity we like, not necessarily what Quest suggested.		if tTest>2			tTest	= 2;		elseif tTest <-2			tTest	= -2;		end		durstat		= 400+ 100*randi(16,1); % duration static is chosen from 400:100:1000 ms		if kk == 1 % Easy test			tTest	= 2;			durstat = 300;		end		mod			= 10^tTest;		disp(mod);		snd			= pa_genripple(vel,dens,mod,1000,durstat,'display',0);		snd			= pa_envelope(snd',300)';		maxSamples  = length(snd);		if maxSamples>10^6			maxSamples = 10^6;		end		lat			= -100;		cnt			= 0;		while lat<0 && cnt<5 % if subject responded to fast, then reiterate this trial			t			= playsound_tdt(snd,maxSamples,RP2_1);			lat			= t-durstat/1000;			str			= ['Latency = ' num2str(lat,3)];			disp(str)			if lat*1000>100 && lat*1000<800				response = 1;			else				response = 0;			end			cnt = cnt+1;		end				% Update the pdf		q			= QuestUpdate(q,tTest,response); % Add the new datum (actual test intensity and observer response) to the database.		lat			= [q.lat lat]; %#ok<AGROW>		q.lat		= lat;		Q(ii).q		= q;			end		% Ask Quest for the final estimate of threshold.	t				= QuestMean(q);		 % Recommended by Pelli (1989) and King-Smith et al. (1994). Still our favorite.	sd				= QuestSd(q);	disp('----------------------------------------------------------------------');	fprintf('Final threshold estimate (mean±sd) is %.2f ± %.2f\n',t,sd);	disp(['Trial ' num2str(ii)]);	disp('----------------------------------------------------------------------');		%% Save data	pa_datadir;	fnametime = [fname datestr(clock,30)];	save(fnametime,'Q');endsave(fname,'Q');%% PLAYSOUNDfunction t = playsound_tdt(snd,maxSamples,RP2_1)% Play sound, and determine reaction time%% Check buttonpress% Wait for release of all keys on keyboard:KbReleaseWait;press        = RP2_1.GetTagVal('Button');while press && ~KbCheck	press        = RP2_1.GetTagVal('Button');end% Load sounddisp('% load sound');RP2_1.WriteTagV('WavData', 0, snd(1:maxSamples));RP2_1.SetTagVal('WavCount',maxSamples-1);% start soundtic;RP2_1.SoftTrg(1);fprintf('Audio playback started, press any key when sound changes.\n');% do something useful% Wait for release of all keys on keyboard:KbReleaseWait;% wait while busybusy        = RP2_1.GetTagVal('Busy');while busy && ~KbCheck	busy = RP2_1.GetTagVal('Busy');endt       = toc;% stop soundRP2_1.SetTagVal('WavCount',0);function Q	= pa_ripplequest_pc(fname,Q,Fs,trials)n			= length(Q); % number of ripples%% Progress barh			= waitbar(0,'Progress...');nprogress	= n*trials;prog		= 0;%% Actual testfor ii = 1:n	for kk = 1:trials		% Get recommended level.  Choose your favorite algorithm.		q		= Q(ii).q;		vel		= Q(ii).vel;		dens	= Q(ii).dens;		tTest	= QuestQuantile(q);	% Recommended by Pelli (1987), and still our favorite.		% We are free to test any intensity we like, not necessarily what Quest suggested.		if tTest>2			tTest	= 2;		elseif tTest <-2			tTest	= -2;		end		durstat		= 400+ 100*randi(16,1); % duration static is chosen from 400:100:1000 ms		if kk == 1 % Easy test			tTest	= 2;			durstat = 300;		elseif kk == 2 % Moderate Easy test			tTest	= 1.3979;		elseif kk == 3 % Check test			tTest	= -2;		elseif kk == 4 % Easy test			tTest	= 1.6;		end		mod			= 10^tTest;		disp(mod);% 		figure(66)		snd			= pa_genripple(vel,dens,mod,1000,durstat,'display',1,'Fs',Fs);		snd			= pa_envelope(snd',300)';		lat			= -100;		cnt			= 0;		while lat<0 && cnt<5 % if subject responded to fast, then reiterate this trial			t			= playsound(snd,Fs);			lat			= t-durstat/1000;			str			= ['Latency = ' num2str(lat,3)];			disp(str)			if lat*1000>100 && lat*1000<1500				response = 1;			else				response = 0;			end			cnt = cnt+1;		end				% Update the pdf		q			= QuestUpdate(q,tTest,response); % Add the new datum (actual test intensity and observer response) to the database.		lat			= [q.lat lat]; %#ok<AGROW>		q.lat		= lat;		Q(ii).q		= q;						%% Progress		prog		= prog+1;		waitbar(prog/nprogress,h);		drawnow	end		% Ask Quest for the final estimate of threshold.	t				= QuestMean(q);		 % Recommended by Pelli (1989) and King-Smith et al. (1994). Still our favorite.	sd				= QuestSd(q);	disp('----------------------------------------------------------------------');	fprintf('Final threshold estimate (mean±sd) is %.2f ± %.2f\n',t,sd);	disp(['Trial ' num2str(ii)]);	disp('----------------------------------------------------------------------');		%% Save data	pa_datadir;	fnametime = [fname datestr(clock,30)];	save(fnametime,'Q');endsave(fname,'Q');%% PLAYSOUNDfunction t = playsound(snd,freq)% Play sound, and determine reaction time% initializationnrchannels	= 1;repetitions = 1;% % % Perform basic initialization of the sound driver:% % InitializePsychSound;% % % % % Open the default audio device [], with default mode [] (==Only playback),% % % and a required latencyclass of zero 0 == no low-latency mode, as well as% % % a frequency of freq and nrchannels sound channels.% % % This returns a handle to the audio device:% % try% % 	% Try with the 'freq'uency we wanted:% % 	pahandle = PsychPortAudio('Open', [], [], 0, freq, nrchannels);% % catch %#ok<CTCH>% % 	% Failed. Retry with default frequency as suggested by device:% % 	fprintf('\nCould not open device at wanted playback frequency of %i Hz. Will retry with device default frequency.\n', freq);% % 	fprintf('Sound may sound a bit out of tune, ...\n\n');% % 	% % 	psychlasterror('reset');% % 	pahandle = PsychPortAudio('Open', [], [], 0, [], nrchannels);% % end% % % % % Fill the audio playback buffer with the audio data 'wavedata':% % PsychPortAudio('FillBuffer', pahandle, snd);% % tic;% %      % % % Start audio playback for 'repetitions' repetitions of the sound data,% % % start it immediately (0) and wait for the playback to start, return onset% % % timestamp.% % PsychPortAudio('Start', pahandle, repetitions, 0, 1);% player = audioplayer(snd,freq);tic;play(player);% % Wait for release of all keys on keyboard:% KbReleaseWait;fprintf('Audio playback started, press any key when sound changes.\n');% lastSample	= 0;% lastTime	= t1;input('Press');t = toc;stop(player);% % Stop playback:% PsychPortAudio('Stop', pahandle);% % % Close the audio device:% PsychPortAudio('Close', pahandle);